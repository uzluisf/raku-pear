use Pear;
use Pear::Config;
use Log;
 
=comment APP SETUP
 
# Allow that named arguments appear after positional ones.
# See: https://docs.raku.org/language/create-cli#%*SUB-MAIN-OPTS
my %*SUB-MAIN-OPTS = :named-anywhere;
 
# Set up the directory and the configuration file.
my $working-dir = $*CWD.absolute.IO;
my $config      = Pear::Config.new(:$working-dir);

# Set up the application.
my $app = Pear.new(:$working-dir, :$config);

my Log $log .= new;

=comment CLI OPTIONS
 
#| Render the site.
multi MAIN(
    'render',
    Bool:D :$skip-pages  = False,         #= Skip pages generation. (Default = False)
    Bool:D :$skip-blog   = False,         #= Skip blog generation. (Default = False)
    Bool:D :$skip-tags   = False,         #= Skip tags generation. (Default = False)
    Str:D  :$config-name = 'config.yaml'  #= Name of configuration file. (Default = config.yaml)
) {
    $log.info("Pear working in directory '{$working-dir.basename}'");
    $log.info("Loading configuration file '{$config.config-name}'");

    # update configuration file.
    if $config-name ne 'config.yaml' {
        $app.config.config-name = $config-name;
        $app.config.load-config();
    }

    given $app {
        .generate-posts if !$skip-blog;
        .generate-pages if !$skip-pages;
         # tags are collected from posts so tags must be generated after posts.
        .generate-tags  if !$skip-tags;
    }

    $log.info("Site rendered at '{$config.output-dir.basename}'");
}

#| Start local web server and serve rendered site.
multi MAIN(
    'serve',
    Int:D :p(:$port) = 3000, #= Port in which the server should run. (Default = 3000)
) {
    my $build-dir = $config.output-dir;
    my $server = Pear::Preview::HTTP.new(
        :$build-dir, :$port, :host('localhost'), :!no-livereload, :!omit-html-ext,
    );

    await $server.webserver();
}

#| Start local web server and re-render site on content/template modification.
multi MAIN(
    'watch',
    Int:D :p(:$port) = 3000,              #= Port in which the server should run. (Default = 3000)
    Bool:D :$no-livereload = False,       #= Disable livereload when running pear watch. (Default = False)
    Str:D  :$config-name = 'config.yaml'  #= Name of configuration file. (Default = config.yaml)
) {
    $log.info("Pear working in directory '{$working-dir.basename}'");
    $log.info("Loading configuration file '{$config.config-name}'");

    # This could've been an anonymous class but for the sake of clarity,
    # we're giving it a name. The watcher call the method 'write' on its
    # attribute 'writer'.
    class Writer {
        has $.app;

        method write {
            given $!app {
                .generate-posts;
                .generate-pages;
                .generate-tags;
            }
        }
    }

    # update configuration file.
    if $config-name ne 'config.yaml' {
        $app.config.config-name = $config-name;
        $app.config.load-config();
    }

    my $writer  = Writer.new(:$app);
    my $watcher = Pear::Preview.new(
        :$writer, :$config, :$port, :host('localhost'), :$no-livereload
    );

    $watcher.watch()
}
